<?php
/**
 * Turba hooks configuration file.
 *
 * THE HOOKS PROVIDED IN THIS FILE ARE EXAMPLES ONLY.  DO NOT ENABLE THEM
 * BLINDLY IF YOU DO NOT KNOW WHAT YOU ARE DOING.  YOU HAVE TO CUSTOMIZE THEM
 * TO MATCH YOUR SPECIFIC NEEDS AND SYSTEM ENVIRONMENT.
 *
 * For more information please see the horde/config/hooks.php.dist file.
 *
 * $Id$
 */

class Turba_Hooks
{
    /**
     * Called when we store a value.
     *
     * @param string $attribute      Attribute name.
     * @param string $new            New value.
     * @param string $old            Old value.
     * @param Turba_Object $contact  Contact object.
     *
     * @return string  The encoded value.
     */
//     public function encode_attribute($attribute, $new, $old, $contact)
//     {
//         switch ($attribute) {
//         case 'password':
//             /* Passwords should be MD5 encoded, but not displayed. */
//             return (is_null($new) || ($new == '') || ($new == '[Not Displayed']))
//                 ? $old
//                 : hash('md5', $new);
//         }
//
//         return $new;
//     }


    /**
     * Called when we display a value.
     *
     * @param string $attribute      Attribute name.
     * @param string $new            New value.
     * @param string $old            Old value.
     * @param Turba_Object $contact  Contact object.
     *
     * @return string  The decoded value.
     * @throws Turba_Exception  Thrown if there is nothing to decode.
     */
//     public function decode_attribute($attribute, $value, $contact)
//     {
//         switch ($attribute) {
//         case 'password':
//             /* Passwords should be MD5 encoded, but not displayed. */
//             return (strstr($_SERVER['PHP_SELF'], 'editobject'))
//                 ? null
//                 : '[Not Displayed]';
//         }
//
//         throw new Turba_Exception('No decode handler.');
//     }

    /**
     * Example hook demonstrating how to dynamically populate the addressbooks
     * prefs so share enabled sources can be force added correctly.
     *
     */
//    public function pushapp_post()
//    {
//        // If you only want to add certain address books, or only the default
//        // share, you can add that logic here as well. The important part is
//        // to make sure you run Turba::availableSources() through
//        // Turba::getConfigFromShares() to ensure the full share list is built
//        // and available before you act on it.
//        // Also note that this example does not save the prefs to storage,
//        // as the example assumes a locked pref.
//        $GLOBALS['prefs']->setValue(
//            'addressbooks',
//            json_encode(array_keys(Turba::getConfigFromShares(Turba::availableSources()))),
//            array('nosave' => true));
//    }
     /**
      * Called when a turba related preference is changed.
      *
      * If you are using ActiveSync, you should enable this hook so the user's
      * devices can pick up changes to selected sources to sync.
      */
      // public function prefs_change($pref)
      // {
      //     switch ($pref) {
      //     case 'sync_books':
      //          if ($GLOBALS['conf']['activesync']['enabled']) {
      //               try {
      //                    $stateMachine = $GLOBALS['injector']->getInstance('Horde_ActiveSyncState');
      //                    $stateMachine->setLogger($GLOBALS['injector']->getInstance('Horde_Log_Logger'));
      //                    $devices = $stateMachine->listDevices($GLOBALS['registry']->getAuth());
      //                    foreach ($devices as $device) {
      //                        $stateMachine->removeState(null, $device['device_id'], $GLOBALS['registry']->getAuth());
      //                    }
      //                    $GLOBALS['notification']->push(_("All state removed for your ActiveSync devices. They will resynchronize next time they connect to the server."));
      //               } catch (Horde_ActiveSync_Exception $e) {
      //                    $GLOBALS['notification']->push(_("There was an error communicating with the ActiveSync server: %s"), $e->getMessage(), 'horde.err');
      //               }
      //          }
      //     }
      // }

}
